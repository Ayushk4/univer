"""
Test Script for Univer MCP Server

This script makes hardcoded calls to the UniverSheetsController to verify
that all the read-only tools work correctly.

Usage:
    python test_mcp.py [--url http://localhost:3002/sheets/] [--headless] [--quick]
    
Options:
    --url URL       Univer server URL (default: http://localhost:3002/sheets/)
    --headless      Run browser in headless mode
    --quick         Run quick smoke test only (4 tests instead of 10)
"""

import asyncio
import json
import sys
from mcp_server import UniverSheetsController


def print_section(title: str):
    """Print a formatted section header"""
    print("\n" + "=" * 60)
    print(f"  {title}")
    print("=" * 60)


def print_result(name: str, result: dict):
    """Print formatted result"""
    print(f"\n‚úÖ {name}:")
    # Remove screenshot data for cleaner output
    if 'screenshot' in result:
        screenshot_len = len(result['screenshot'])
        result = result.copy()
        result['screenshot'] = f"<base64 data, {screenshot_len} chars>"
    print(json.dumps(result, indent=2))


async def run_tests(url: str = "http://localhost:3002/sheets/", headless: bool = False):
    """Run all test scenarios"""
    
    print_section("Initializing Univer Sheets Controller")
    controller = UniverSheetsController()
    
    try:
        # Start the controller
        print(f"üì° Connecting to Univer at: {url}")
        await controller.start(url, headless=headless)
        print("‚úÖ Connected successfully!")
        
        # Test 1: Get Activity Status
        print_section("Test 1: Get Activity Status (without screenshot)")
        result = await controller.get_activity_status(screenshot=False)
        print_result("Activity Status", result)
        
        # Test 2: Get Activity Status with Screenshot
        print_section("Test 2: Get Activity Status (with screenshot)")
        result = await controller.get_activity_status(screenshot=True)
        print_result("Activity Status + Screenshot", result)
        
        # Test 3: Get Sheets List
        print_section("Test 3: Get All Sheets")
        result = await controller.get_sheets()
        print_result("Sheets List", result)
        
        # Test 4: Get Range Data (small range)
        print_section("Test 4: Get Range Data (A1:C5)")
        result = await controller.get_range_data("A1:C5")
        print_result("Range Data", result)
        
        # Test 5: Get Range Data with Styles
        print_section("Test 5: Get Range Data with Styles (A1:B3)")
        result = await controller.get_range_data("A1:B3", return_style=True)
        print_result("Range Data + Styles", result)
        
        # Test 6: Get Multiple Ranges
        print_section("Test 6: Get Multiple Ranges")
        result = await controller.get_range_data(["A1:B2", "D1:E2"])
        print_result("Multiple Ranges", result)
        
        # Test 7: Search Cells by Value
        print_section("Test 7: Search Cells by Value")
        result = await controller.search_cells("Total", "value")
        print_result("Search Results (value)", result)
        
        # Test 8: Search Cells by Formula
        print_section("Test 8: Search Cells by Formula")
        result = await controller.search_cells("=", "formula")
        print_result("Search Results (formula)", result)
        
        # Test 9: Scroll and Screenshot
        print_section("Test 9: Scroll to Cell and Screenshot")
        result = await controller.scroll_and_screenshot("A1")
        print_result("Scroll + Screenshot", result)
        
        # Test 10: Test error handling - large range
        print_section("Test 10: Testing Large Range Warning")
        print("‚ö†Ô∏è  Requesting a moderately sized range (A1:E40 = 200 cells)...")
        result = await controller.get_range_data("A1:E40")
        print(f"‚úÖ Successfully retrieved {len(result.get('values', []))} rows")
        
        # Summary
        print_section("Test Summary")
        print("‚úÖ All tests completed successfully!")
        print("\nüìã Tests Run:")
        print("  1. ‚úì Activity Status (no screenshot)")
        print("  2. ‚úì Activity Status (with screenshot)")
        print("  3. ‚úì Get Sheets List")
        print("  4. ‚úì Get Range Data (simple)")
        print("  5. ‚úì Get Range Data (with styles)")
        print("  6. ‚úì Get Multiple Ranges")
        print("  7. ‚úì Search Cells (by value)")
        print("  8. ‚úì Search Cells (by formula)")
        print("  9. ‚úì Scroll and Screenshot")
        print(" 10. ‚úì Large Range Test (200 cells)")
        print("\nüéâ MCP Server is working correctly!")
        
    except Exception as e:
        print(f"\n‚ùå Error during tests: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print_section("Cleanup")
        print("üßπ Closing browser...")
        await controller.cleanup()
        print("‚úÖ Cleanup complete!")


async def quick_test(url: str = "http://localhost:3002/sheets/", headless: bool = False):
    """Quick smoke test - minimal verification of MCP server functionality"""
    print("üöÄ Starting quick test...\n")
    
    controller = UniverSheetsController()
    
    try:
        # Connect
        print("1. Connecting to Univer...")
        await controller.start(url, headless=headless)
        print("   ‚úÖ Connected!\n")
        
        # Get status
        print("2. Getting workbook status...")
        status = await controller.get_activity_status()
        print(f"   ‚úÖ Active sheet: {status['activeSheetName']}")
        print(f"   ‚úÖ Total sheets: {status['sheetCount']}\n")
        
        # Get some data
        print("3. Reading range A1:C3...")
        data = await controller.get_range_data("A1:C3")
        print(f"   ‚úÖ Retrieved {len(data['values'])} rows\n")
        
        # List sheets
        print("4. Getting all sheets...")
        sheets = await controller.get_sheets()
        print(f"   ‚úÖ Found {len(sheets)} sheet(s):")
        for sheet in sheets:
            print(f"      - {sheet['name']}")
        
        print("\n‚ú® All tests passed! MCP server is working.\n")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}\n")
        import traceback
        traceback.print_exc()
    finally:
        await controller.cleanup()


async def main():
    """Main entry point"""
    # Parse command line arguments
    univer_url = "http://localhost:3002/sheets/"
    headless = False
    quick_mode = False
    
    if "--url" in sys.argv:
        idx = sys.argv.index("--url")
        if idx + 1 < len(sys.argv):
            univer_url = sys.argv[idx + 1]
    
    if "--headless" in sys.argv:
        headless = True
    
    if "--quick" in sys.argv:
        quick_mode = True
    
    if "--help" in sys.argv or "-h" in sys.argv:
        print(__doc__)
        return
    
    # Run appropriate test suite
    if quick_mode:
        await quick_test(univer_url, headless)
    else:
        await run_tests(univer_url, headless)


if __name__ == "__main__":
    asyncio.run(main())

